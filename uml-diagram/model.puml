@startuml coffeBreak.model

skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor #444
    NoteBackgroundColor #F9F9F9
}

package model {

    interface Model <<interface>> {
        + handleAction(action: Action): void
        + setState(state: GameStateType): void
        + update(deltaTime: long): void
    }

    class GameModel implements Model {
        - entities: List<Entity>
        - currentState: GameState
        + registerViewUpdater(updater: IViewUpdater): void
    }

    interface Entity <<interface>> {
        + getPosition(): Position
        + getDimension(): Dimension
        + update(deltaTime: long): void
    }

    interface GameState <<interface>> {
        + enterState(): void
        + exitState(): void
        + handleInput(action: Action): void
    }

    class MenuState implements GameState
    class InGameState implements GameState
    class PauseState implements GameState
    class GameOverState implements GameState

    interface PhysicsManager <<interface>> {
        + update(entities: List<Entity>, deltaTime: float): void
        + checkCollision(e1: Entity, e2: Entity): boolean
    }

    class GamePhysicsManager implements PhysicsManager {
        - gravity : float
        + setGravity(value: float): void
    }

    interface ScoreManager <<interface>> {
        + updateScore(points: int): void
        + getCurrentScore(): int
    }

    interface LevelManager <<interface>> {
        + loadLevel(levelNum: int): boolean
        + getCurrentLevel(): int
        + restartLevel(): void
        + isLevelComplete(): boolean
    }

    class GameLevelManager implements LevelManager {
        - currentLevel: int
        - levels: Map<Integer, LevelData>
        + loadCustomLevel(data: String): void
    }

    GameModel *-- Entity
    GameModel --> GameState
    PhysicsManager -- GameModel
    ScoreManager -- GameModel
    LevelManager -- GameModel

    note top of Model
        == FACADE + OBSERVER ==
        **Ruolo**: 
        Punto centrale dell'architettura MVC
        
        **Pattern**:
        • Facade: Semplifica l'accesso ai sottosistemi
        • Observer: Notifiche alla View tramite IViewUpdater
        
        **Flusso**:
        1. Riceve comandi dal Controller
        2. Coordina Physics/Score/Level managers
        3. Aggiorna stato entità
        4. Notifica cambiamenti alla View
    end note
    note left of GameModel
        == STATE + FACADE PATTERNS ==
        **Scopo**: Coordinare i sottosistemi
        
        **Componenti**:
        - PhysicsManager: gestione fisica
        - ScoreManager: punteggi e record
        - LevelManager: progressione livelli
        - GameState: stato corrente
        
        **Pattern Integrati**:
        ► State: Gestione stati di gioco
        ► Facade: Interfaccia unificata
    end note
    note right of GameState
        == STATE PATTERN ==
        **Gestione stati del gioco**:
        • MenuState: Schermata iniziale
        • InGameState: Gioco attivo
        • PauseState: Gioco in pausa
        • GameOverState: Fine partita
        
        **Transizioni**:
        Controller → Model → View
        (Sincronizzazione a 3 livelli)
    end note
    note left of Entity
        == COMPOSITE + STRATEGY ==
        **Pattern**:
        • Composite: Gerarchia di entità
        • Strategy: Comportamenti intercambiabili
        
        **Implementazione**:
        ► PlayerEntity: Movimento input
        ► EnemyEntity: IA semplice
        ► PlatformEntity: Fisica statica
        
        **View Integration**:
        Position/Dimension per rendering
    end note
    note top of PhysicsManager
        == STRATEGY PATTERN ==
        **Implementazioni**:
        • BasicPhysics: Per giochi semplici
        • AdvancedPhysics: Con impulsi/forze
        
        **View Sync**:
        Collisioni → Animazioni
        Posizioni → Rendering
        
        **Ottimizzazioni**:
        Spatial partitioning opzionale
    end note
    note top of LevelManager
        == BUILDER + FACTORY ==
        **Pattern**:
        • Builder: Costruzione livelli complessi
        • Factory: Creazione entità da dati
    end note
}

note right of model
    **ARCHITETTURA COMPLETA**
    ◉ Controller: Input/Commands
    ◉ Model: Logica di gioco
    ◉ View: Rendering
    
    **PATTERN CHIAVE**:
    1. MVC: Separazione responsabilità
    2. Observer: Comunicazione Model-View
    3. State: Gestione stati
    4. Strategy: Algoritmi intercambiabili
    
    **PERFORMANCE**:
    ► 60 FPS target
    ► 16ms/frame budget
    ► 3 thread principali
end note

@enduml