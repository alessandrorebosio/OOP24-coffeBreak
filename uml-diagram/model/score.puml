@startuml coffeBreak.score

    skinparam class {
        BackgroundColor White
        BorderColor Black
        ArrowColor #444
        NoteBackgroundColor #F9F9F9
    }

    package score {

        interface ScoreManager <<interface>> {
            + getCurrentScore() : int
            + getCurretBonus() : int
            + getLeaderBoard() : List<Entry>
            + getHighestScore() : int
            + calculateBonus() : void
            + earnPoints() : void
            + startMap() : void
            + endMap() : void
            + endGame(String name) : void
        }
        
        class GameScoreManager implements ScoreManager {
            - score : Score
            - bonus : Bonus
            - repository : Repository
            - leaderBoard : LeaderBoard
        }
        
        interface Score <<interface>> {
            + getScore() : int
            + increase(amount : int) : void
            + reset() : void
        }
        
        class GameScore implements Score {
            - score : int
        }
        
        interface Bonus <<interface>> {
            + getBonus() : int
            + setBonus(value : int) : void
            + calculate() : void
        }
        
        class GameBonus implements Bonus {
            - bonus : int
        }
        
        interface LeaderBoard <<interface>> {
            + getLeaderBoard() : List<Entry>
            + addEntry(entry : Entry) : void
            + isWritten() : AtomicBoolean
        }
        
        class GameLeaderBoard implements LeaderBoard {
            - MAX_ENTRIES : int
            - ranking: List
            - createDefaultEntries(): List<Entry>
            - isEligible(entry : Entry) : boolean
            - sortAndTrim() : void
        }

        interface Repository <<interface>> {
            + save(ranking : List<Entry>): boolean
            + load(): List
        }
        
        class ScoreRepository implements Repository {
            - dataFile : File
        }

        interface Entry <<interface>> extends Comparable {
            + getName(): String
            + getScore(): int
        }
        
        class ScoreEntry implements Entry, Serializable {
            - name: String
            - score: int
            + compareTo(entry Entry) : int
            + equals(obj : Object) : boolean
            + hashCode() : int
            + toString() : String
        }

        ScoreManager *-- Score
        ScoreManager *-- Bonus
        ScoreManager *-- LeaderBoard
        ScoreManager *-- Repository
        ' GameLeaderBoard o-- Entry
        
        note top of ScoreManager
            == FACADE PATTERN ==
            **Centralizza 3 sistemi**:
            1. Punteggio base (GameScore)
            2. Bonus tempo (GameBonus)
            3. Classifica (GameLeaderBoard)
            
            **Regole DK Originale**:
            ► +100 punti per barile distrutto
            ► +800 per salvare Pauline
        end note
        note bottom of GameScoreManager
            == DECORATOR PATTERN ==
            **Scopo**: Estendere funzionalità base
            
            **Componenti**:
            - Score: gestione valore base
            - BonusCalculator: calcola bonus
            - HighScoreTable: gestione record
            
            **Flusso Punteggio**:
            1. Aggiungi punti base
            2. Applica moltiplicatori
            3. Aggiorna classifica
        end note
        note bottom of GameScore
            == VALUE OBJECT ==
            **Implementazione tipica**:
            • Incremento thread-safe
            • Controllo overflow
            
            **Esempio uso**:
            score.increase(200)
        end note
        note bottom of GameBonus
            == STRATEGY PATTERN ==
            **Bonus Tempo**:
            • Decrementa ogni tot secondi
            • Aggiunto a fine livello
        end note
        note bottom of GameLeaderBoard
            == PROXY + REPOSITORY ==
            **Flusso salvataggio**:
            1. Verifica isEligible(score)
            2. Crea nuova Entry
            3. Persiste su filesystem
            4. Aggiorna cache top 5
            
            **Protezioni**:
            ► Nomi duplicati
            ► Score impossibili
            ► Corruzione dati
        end note
        note bottom of ScoreEntry
            == DATA TRANSFER OBJECT ==
            Salvataggio score con relativo nome.
        end note
    }

@enduml