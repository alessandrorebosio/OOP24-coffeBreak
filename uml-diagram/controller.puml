@startuml coffeBreak.controller

    skinparam class {
        BackgroundColor White
        BorderColor Black
        ArrowColor #444
        NoteBackgroundColor #F9F9F9
    }

    package controller  {
        interface Controller <<interface>> {
            + startGame(): void
            + pauseGame(): void
            + resumeGame(): void
            + exitGame(): void
        }

        class GameController implements Controller {
            - engine: Engine
            - input: InputHandler
            - sound: SoundManager
            - gameState: GameStateType
            + notifyAction(action: Action): void
        }

        interface Engine <<interface>> {
            + start(): void
            + stop(): void
            + update(deltaTime: long): void
            + registerViewUpdater(updater: IViewUpdater): void
        }

        class GameEngine implements Engine {
            - running: boolean
            - frameDuration: long
            - lastFrameTime: long
            + runGameLoop(): void
        }

        interface InputHandler <<interface>> {
            + addListener(listener: ActionListener): void
            + getCurrentAction(): Action
            + setKeyBindings(bindings: Map<KeyCode, Action>): void
        }

        class KeyboardInputHandler implements InputHandler {
            - listeners: List<ActionListener>
            - keyBindings: Map<KeyCode, Action>
            + keyPressed(e: KeyEvent): void
            + keyReleased(e: KeyEvent): void
        }

        interface SoundManager <<interface>> {
            + play(sound: SoundType): void
            + stopAll(): void
            + setVolume(level: float): void
        }

        class GameSoundManager implements SoundManager {
            - sounds: Map<SoundType, AudioClip>
            - volume: float
            + loadSounds(): void
        }

        enum Action {
            JUMP
            MOVE_LEFT
            MOVE_RIGHT
            CLIMB_UP
            CLIMB_DOWN
            PAUSE
        }

        enum GameStateType {
            RUNNING
            PAUSED
            GAME_OVER
            MENU
        }

        enum SoundType {
            JUMP
            BARREL_ROLL
            DEATH
            LEVEL_COMPLETE
            BACKGROUND_MUSIC
        }

        GameController o-- Engine
        GameController o-- InputHandler
        GameController o-- SoundManager

        SoundManager --> SoundType

        note left of Controller 
            == FACADE PATTERN ==
            **Ruolo Principale**:
            Fornisce un'interfaccia unificata per il sottosistema di controllo

            **Responsabilità**:
            • Coordinazione tra input, logica e audio
            • Gestione del ciclo di vita del gioco
            • Transizioni tra stati del gioco

            **Metodi**:
            ▸ startGame(): Avvia il game loop
            ▸ pauseGame(): Mette in pausa l'esecuzione
            ▸ resumeGame(): Riprende dallo stato di pausa
            ▸ exitGame(): Gestisce la chiusura pulita

            **Vantaggi**:
            → Riduce l'accoppiamento tra componenti
            → Semplifica l'interfaccia per la View
        end note
        note bottom of GameEngine
            == GAME LOOP PATTERN ==
            **Implementazione Base**:
            while (running) {
                processInput();
                update(gameState);
                render();
                syncFrameRate();
            }

            **Caratteristiche**:
            • Frame-rate indipendente (deltaTime)
            • Doppio buffer per il rendering
            • Sincronizzazione verticale opzionale

            **Ottimizzazioni**:
            ► Fixed timestep per fisica stabile
            ► Variable timestep per animazioni fluide
            ► Sleep-based per ridurre CPU usage
        end note
        note bottom of KeyboardInputHandler
            == OBSERVER + COMMAND PATTERNS ==
            **Architettura Input**:
            • KeyboardInputHandler osserva gli eventi AWT/Swing
            • Converte KeyCode in Action (Command pattern)
            • Notifica i listener tramite callback

            **Funzionalità**:
            ◉ Mappatura tasti personalizzabile
            ◉ Supporto per input multipli
            ◉ Gestione dello stato dei tasti

            **Estensibilità**:
            → Aggiunta facile di nuovi controlli
            → Supporto per gamepad/Joypad
        end note
        note bottom of GameSoundManager
            == FLYWEIGHT PATTERN ==
            **Gestione Risorse Audio**:
            • Caricamento lazy dei suoni
            • Cache delle risorse caricate
            • Pool di canali audio

            **Ottimizzazioni**:
            ► Precaching dei suoni frequenti
            ► Gestione priorità canali
            ► Mixer dedicato per la musica

            **Estensioni**:
            → Supporto per formati compressi
            → Spatial audio 3D
        end note
        note bottom of Action
            == COMMAND PATTERN ==
            **Astrazione Input**:
            • Converti input fisici in azioni di gioco
            • Indipendente dal dispositivo di input

            **Azioni Specifiche**:
            • JUMP: Salto di Mario
            • MOVE_*: Movimento orizzontale
            • CLIMB_*: Salita/discesa scale
            • PAUSE: Interruzione gioco

            **Vantaggi**:
            → Logica di gioco disaccoppiata dagli input
            → Configurazione tasti dinamica
        end note
        note top of GameStateType
            == STATE PATTERN ==
            **Gestione Stati Gioco**:
            • RUNNING: Gioco attivo
            • PAUSED: Gioco in pausa
            • GAME_OVER: Fine partita
            • MENU: Schermata iniziale

            **Transizioni**:
            ◄► RUNNING ↔ PAUSED (tasto ESC)
            ◄► RUNNING → GAME_OVER (vite terminate)
            ◄► * → MENU (tasto Home)

            **Vantaggi**:
            → Logica separata per ogni stato
            → Gestione ordinata delle risorse
        end note

    }

    note right of controller
        **ARCHITETTURA COMPLETA - FLUSSO PRINCIPALE**
        1. [Input] KeyboardInputHandler rileva pressione tasti
        2. [Command] Converti KeyEvent in Action enum
        3. [Observer] Notifica GameController via ActionListener
        4. [Controller] Inoltra azione a GameEngine e SoundManager
        5. [Engine] Aggiorna stato gioco nel model
        6. [View] IViewUpdater triggera il rendering
        7. [Sound] Riproduci effetti sonori corrispondenti

        **TIMING CRITICO**:
        ► Input processing: < 2ms
        ► Game update: < 5ms
        ► Rendering: < 10ms
        ► Target: 60 FPS (16ms/frame)
    end note

@enduml