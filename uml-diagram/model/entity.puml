@startuml coffeBreak.entity

    skinparam class {
        BackgroundColor White
        BorderColor Black
        ArrowColor #444
        NoteBackgroundColor #F9F9F9
    }

    package "entity" {
        ' ========================
        ' CORE INTERFACES
        ' ========================
        interface Entity <<interface>> {
            + {abstract} getPosition(): Position2D
            + {abstract} setPosition(pos: Position2D): void
            + {abstract} getDimension(): Dimension2D
            + {abstract} getVelocity(): Vector2D
            + {abstract} setVelocity(v: Vector2D): void
            + {abstract} isFacingRight(): boolean
            + {abstract} setFacingRight(facing: boolean): void
            + {abstract} onCollision(other: Entity): void
            + {abstract} intersect(other: Entity): boolean
            + {abstract} update(deltaTime: float): void
        }

        interface Character <<interface>> extends Entity

        interface Enemy <<interface>> extends Entity {
            + {abstract} destroy(): void
            + {abstract} isDestroyed(): boolean
            + {abstract} getDamage(): int
        }

        interface Platform <<interface>> extends Entity {
            + {abstract} getSlope(): PlatformSlope
            + {abstract} isSupporting(e: Entity): boolean
        }

        interface Ladder <<interface>> extends Entity {
            + {abstract} isClimbable(): boolean
            + {abstract} getClimbSpeed(): float
        }

        interface Collectible <<interface>> extends Entity {
            + {abstract} collect(): void
            + {abstract} isCollected(): boolean
            + {abstract} getValue(): int
        }

        ' ========================
        ' ABSTRACT CLASSES
        ' ========================
        abstract GameEntity <<abstract>> implements Entity{
            # position: Position2D
            # dimension: Dimension2D
            # velocity: Vector2D
            # facingRight: boolean
            + {final} getPosition(): Position2D
            + setPosition(pos: Position2D): void
            + {final} getDimension(): Dimension2D
            + getVelocity(): Vector2D
            + setVelocity(v: Vector2D): void
            + isFacingRight(): boolean
            + setFacingRight(facing: boolean): void
            + intersect(other: Entity): boolean
            # update(deltaTime: float): void
        }

        ' ========================
        ' CONCRETE ENTITIES (DK-STYLE)
        ' ========================
        class Mario extends GameEntity implements Character
        class Barrel extends GameEntity implements Enemy 
        class BasicLadder extends GameEntity implements Ladder
        class BasicPlatform extends GameEntity implements Platform 
        class GameCollectible extends GameEntity implements Collectible

        ' ========================
        ' NOTES & PATTERNS
        ' ========================
        note left of Entity
            == CORE COMPONENT PATTERN ==
            **Base contract for all game objects**:
            - Spatial properties (position/dimension)
            - Movement control (velocity)
            - Collision handling
            - Update loop integration
        end note

        note left of Mario
            == STATE PATTERN ==
            **Behaviors change per state**:
            • Jumping: ignores ladder input
            • Climbing: ignores gravity
            • HammerActive: destroys barrels
            **DK References**:
            - 3 lives system
            - Temporary hammer power-up
        end note

        note top of GameEntity
            == TEMPLATE METHOD PATTERN ==
            **Provides common defaults**:
            1. Position/dimension management
            2. Facing direction
            3. Basic physics fields
            **Subclasses must implement**:
            ► update() logic
            ► collision reactions
        end note

        note right of Barrel
            == STRATEGY PATTERN ==
            **Barrel behaviors**:
            1. Normal roll (straight)
            2. Bounce (when hitting walls)
            3. Fall (when no platform)
            **DK Physics**:
            - Accelerates downhill
            - Bounces unpredictably
        end note
    }

@enduml